@page "/gamblers"
@inherits BetsKing.Client.Pages.BasePage

<h1>Zarządzanie typerami</h1>
<hr />
<h3>Wyedytuj typera lub dodaj nowego</h3>
<hr />

<div class="col-lg-6">
    <h5>Nowy typer</h5>
    <div class="row">
        <div class="col-lg-3">
            <label for="teamAName">Login</label>
            <input id="teamAName" class="form-control" type="text" bind="@addGamblerModel.Name" />
        </div>

        <div class="col-lg-3">
            <label for="gamblerDisplayName">Nazwa wyśw.</label>
            <input id="gamblerDisplayName" class="form-control" type="text" bind="@addGamblerModel.DisplayName" />
        </div>

        <div class="col-lg-3">
            <label for="teamAScore">Hasło</label>
            <input id="teamAScore" class="form-control" type="text" bind="@addGamblerModel.Password" />
        </div>

        <div class="col-lg-2">
            <label for="saveBtn">Dodaj</label>
            <button id="saveBtn" class="btn btn-primary" onclick="@AddNew">Dodaj</button>
        </div>
    </div>
    <div>
    </div>
</div>

<hr />

@if (gamblers != null)
{
    <div class="list-group col-lg-6">
        @foreach (var gambler in gamblers)
        {
            <div class="row list-group-item list-group-item-action">
                <div class="row">
                    <div class="col-lg-5">
                        <label for="teamAName">Nazwa</label>
                        <input id="teamAName" class="form-control" type="text" disabled bind="@gambler.DisplayName" />
                    </div>

                    <div class="col-lg-5">
                        <label for="teamAScore">Login</label>
                        <input id="teamAScore" class="form-control" type="text" disabled bind="@gambler.UserName" />
                    </div>

                    <div class="col-lg-2">
                        <label for="teamBScore">Admin</label>
                        <input id="teamBScore" class="form-control form-check-input" type="checkbox" disabled bind="@gambler.IsAdmin" />
                    </div>
                    <div>
                    </div>
                </div>
            </div>
        }
    </div>
}


@functions {

AddGamblerViewModel addGamblerModel = new AddGamblerViewModel();

List<GamblerViewModel> gamblers;

protected override async Task OnInitAsync()
{
    await GetAndSetGamblers();
}

async Task AddNew()
{
    if (!string.IsNullOrEmpty(addGamblerModel.Name) && !string.IsNullOrEmpty(addGamblerModel.Password))
    {
        var gamblerId = await ApiClient.SendJsonAuthorizedAsync<int>(HttpMethod.Post, "api/gambler", addGamblerModel);

        if (gamblerId > 0)
        {
            addGamblerModel = new AddGamblerViewModel();

            await GetAndSetGamblers();
        }
    }
}

async Task GetAndSetGamblers()
{
    gamblers = await ApiClient.GetJsonAuthorizedAsync<List<GamblerViewModel>>($"api/gambler/getall");
}
}
